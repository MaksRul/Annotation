import java.io.*;
import java.lang.reflect.Field;

public class Serialization implements Serializable {
    public Serialization() {
        super();
    }

    public String serialize(Object object, String path) {
        Class<?> cl = object.getClass();
        StringBuilder text = new StringBuilder();
        Field[] fields = cl.getDeclaredFields();
        for (Field field : fields) {
            if (field.isAnnotationPresent(Save.class)) {
                if (!field.isAccessible()) {
                    field.setAccessible(true);
                    text.append(field.getName() + "\t=");
                    if (field.getType() == int.class) {
                        try {
                            text.append(field.getInt(object));
                        } catch (IllegalAccessException e) {
                            e.printStackTrace();
                        }
                    }
                    if (field.getType() == long.class) {
                        try {
                            text.append(field.getLong(object));
                        } catch (IllegalAccessException e) {
                            e.printStackTrace();
                        }
                    }
                    if (field.getType() == String.class) {
                        try {
                            text.append((String) field.get(object));
                        } catch (IllegalAccessException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        }
        try (FileOutputStream fos = new FileOutputStream(path);
             ObjectOutputStream oos = new ObjectOutputStream(fos);) {
            oos.writeObject(text);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return text.toString();
    }
}
